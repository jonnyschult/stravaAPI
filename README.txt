BUGS TO FIX AND MINOR FLAWS
    * FIXED Conflicting dates between UTC and local time (see July 1 as an example)
    * FIXED Show multi-run days in histogram 
    * FIXED Address bargraph display for small date ranges (probably related to multi-run day issue)
    * FIXED Bar height not always right (longest hidden by multi-run bug?)
    * Get duration into hour:minutes:seconds format
    * Get pace in minutes:seconds instead of minutes.seconds

API METHOD
    * Generate Sheet button fires reAuthorize() when date parameters are entered
    * ReAuthorize() initiates oauth flow
    * Oauth flow makes API post (I used Postman to get some of the information needed after authorization)
    * Reauthorize posts credentials to security server via API post call with client secret and refresh key. (fuzzy knowledge here)
    * Had to log into Strava and give permission for my app to access my data
    * If permission given security server returns temporary authentication key
    * Authentication key is passed via functions to the data server in two API calls, one for athlete profile info, another for their activities 
    * Activities API call takes in date parameters, runs timeConverter() (see more under functions descriptions) to set date to Epoch/Unix time, which is what the API expects for date parameters.
    * Both json()ify the information and pass it as arguments to the accessibleData().

MAIN FUNCTION
    1 accessibleData() is the overarching function which generates the information in the table and histogram.
    2 It combines the arguments passed to it, json()ified athlete and activities data, into an object, 'userData', that is then accessed throughout the function
    3 index.html contains a stubbed out <thead> and <tfoot>
    4 <thead> already has column head values. Athlete profile picture is insterted to first <thead> <td> 
    5 Two while loops remove generated data when new API call is made
    6 Table is generated via for loop with switch
    7 For loop loops over the activities creating <tr>s for each activity
    8 Second for loop then creates <td>s for each <tr> generated in the parent loop. The number of <tds> is determined by what data I decided to show, which, index value of run for list created, date, distance/km,	distance/mi, duration elevation gain/m elevation gain/ft pace/km pace/mi average HR max HR
    9 To assign values to <td>s, I used a switch which checks value of for loop index 'j'. When j = n, then the <td> n which is created in that loop interation, is assigned a value via innerText which corresponds to that data column type. For instance, the third <td> created is to display distance in km. So, when index j = three, it creates the third <td> and then goes into switch, if j === 3, which in this case it does, it assigns the distance values from userData.activities for at the index of i, the current parent iteration which is the <tr> for a specific activity, and then converts that distance into km. 
    10 <td>s are appended to <tr>
    11 <tr>s are appended to dynamicRows tbody
    12 End fo <tr> making for loop
    13 <tfoot> is stubbed out and ready to receive values. 
    14 values are assigned via for loop over each <td> in the <tfoot> 
    15 each loop enters a switch, which dynamically assigns <td> values by ranging over values entered for <tbody> data, averages or totals as applicable, then insterts data to that particular <td>. Similar to other switch, but more complicated.
    16 accessibleData then calls histogramMaker function which creates a histogram out of userData activities (bit buggy).
    17 histogramMaker() checks the number of days spanning the dates entered by user, creates a div and a span for each day, sets the divs height to 1px and their width to (1/numberOfDays * 100)% so that each div takes up equal space and can be dynamically resized with browser. It then as assigns span value to display none and visibility hidden. It set span innerText to 'No Activity Recorded' as the default value for each day. It then appends each span to the div, and each div to histogram container div. 
    18 mostMilesDayFinder() is a function which takes in the activities, loops over all the distance, checks the distance, compiles multi-run distance into one value and then returns the distance for whatever day had the most miles, be it over one run or multiple. 
    19 Two functions are then called, dayChecker() and barBuilder(). Within barBuilder(), a loop is called which goes over each activity. dayChecker() is called to get the value of the date of the activity. That day value is then used to index into the array of day divs created before. It resets the height value of the divs generated by the first loop in the function. The height is set to the activities distance / longest run, which gives a decimal, multiplied by 100 to get a percent, and then given the percent symbol. It looks like this `((activities.distance/longestRun) * 100)%`. If there is more than one run in a day, then the height values for that day's div is increased in the same way. This allows one divBar to represent the whole day's distance. The dynamic process also enables the longest run to be set to 100%, and every other run distance height is set relative to that height. So, say the longest run is 10k, then that run's corresponding div height will be set to 100%, another run which was 6.5 will then have it's div set to 65%. This allows the user to see the frequency of runs as well as relative distance. (this can be improved upon later to include a coordinate system which will give precise ranges of distance). 
    20 The span inside the div is then given an innerText value which is the date and distance of the run. If there is more than one run on that day, then the number of runs is also represented in that span. With css, when the user hover over the bar (div), it highlights it to a themed color and displays the span content.
    21 Finally, there is a header style function which detects scroll height and styles the header. More below.

UNIQUE FUNCTION DESCRIPTIONS 

    epochTimeConverter(date)
        ACCEPTS: date string in 'yyyy-mm-dd' format
        RETURNS: date in unix/epoch time (the number of second since Jan 1, 1970 to date). 
        METHOD: 
            - the dateVal variable holds the results of splits string on '-' which creates an array of interger strings. year, month and day are destringified using parseInt() and assigned to variables. epochYear is a variable holding 1970, the base year for unix time. leapDay is a variable to hold the number of leap days from epochYear and given date year. monthDays is a variable to hold the number of total days calculated by month values. 
            - loop is created, index set to two, because 1972 is the first leap year after 1970, and increments by four. The condition is i less than year minus epoch year, which gives the range of years. Each loop increments loopDay. 
            - loop is created to determine the number of days given the month value. Different months have different numbers of days. First, it checks for February by checking for index two, then April, Jun, Sept and Nov, which have thirty, else, it just increases the value of monthDays by 31. 
            - finally, epochTime holds the sum of year minus epoch year multiplied by 365, and monthDays and day, and leap day. It then multiplies that numerical representation of days by 86400, the number of seconds in a day. 
            - returns epochTime
    
    getAthlete(), getActivities() and reAuthorize(),
        SEE API METHOD ABOVE. 
    
    accessibleData()
        SEE MAIN FUNCTION ABOVE. 

    timeConverter(seconds)
        ACCEPTS: time in seconds
        RETURNS: time in minutes and seconds (total duration of run)
        METHOD: 
            - remainingSecs holds value of seconds which don't add up to a minute as . It does this by running % 60 on the seconds argument.
            - minutes holds value of minutes in the seconds date by dividing by 60, with Math.floor() to remove the remainder. 
            - time holds the value of minutes plus remainingSecs/100, which enables the seconds to be represented in decimal style, while maintaining their second arabic numerals. So, it transisitons remainingSecs from 6 to .06, which is then added tot he minutes. 
            - returns time.fixed(2) which ensures that seconds divisible by 10 still show to two places. 6.10 instead of 6.1. 

    minutesPer(time, distance)
        ACCEPTS: time in seconds, duration in meters
        RETURNS: pace in mm.ss format. 
        METHOD:
            - time gets divided by distance/1000 (the divsion by 1000 gives km instead of meters). This gives pace in seconds and km and is stored in the secondsPer variable. 
            - minutes then holds the value of converting seconds pace into minutes and seconds pace by calling timeConverter on the seconderPer value.
            - returns minutes.toFixed(2).

    histogramMaker(activites)
        ACCEPTS: array of activites. 
        RETURNS: undefined (creates histogram by generating on div per day to represent bars in a graph.)
        METHOD: 
            - see 17 under MAIN FUNCTION.
    
    mostMilesDayFinder(activites)
        ACCEPTS: array of activities.
        RETURNS: undefined (sets mostMilesDay to distance of the day with the most miles.)
        METHOD:
            - see 18 under MAIN FUNCTION

    dayChecker(date)
        ACCEPTS: date in 'yyyy-mm-dd' format
        RETURNS: number of days from begin date entered by user to argument date. 
        METHOD:
            - turns date into epoch time by calling epochTimeConverter
            - adds one days worth of second to number to make date inclusive, subtracts first day, an epochtime representation of user input of from date. It then divides by the number of seconds in a day to return a day from start date interger. 

    barBuilder()
        ACCEPTS: array of activities
        RETURNS: undefined (resets divBar values from histogramMaker function for days with activities.)
        METHOD:
            -see 19 under MAIN FUNCTION

    headerStyle()
        ACCEPTS: none
        RETURNS: none
        METHOD: 
            - Found this one online and modified it. 
            - invoked via window.onscroll, which detects scrolling on window. 
            - when scroll is greater than a 100 pixels down, header turns opaque
            - when not greater than a hundered pixels, header returns to transparent. 